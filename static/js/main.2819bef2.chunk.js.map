{"version":3,"sources":["cmps/pad.js","cmps/pad-group.js","cmps/drum-machine.js","serviceWorker.js","index.js"],"names":["Pad","props","react_default","a","createElement","className","id","desc","type","onClick","e","handler","disabled","power","letter","src","url","LETTERS","TEXT","SOUNDS","PadGroup","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playClip","bind","assertThisInitialized","handleInput","makeValidText","document","addEventListener","removeEventListener","clip","text","index","getElementById","target","textContent","indexOf","String","fromCharCode","which","bank","load","volume","play","setDisplay","s","replace","_this2","pads","j","i","push","pad","onKeyDown","slice","React","Component","DrumMachine","state","volChange","bankChange","powerChange","setState","value","innerHTML","bank1Col","backgroundColor","bank2Col","powerCol","color","pad_group","style","min","max","step","defaultValue","onInput","Boolean","window","location","hostname","match","ReactDOM","render","drum_machine","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2819bef2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Pad = props => {\r\n    return (\r\n        <button\r\n            className=\"drum-pad\"\r\n            id={props.desc}\r\n            type=\"button\"\r\n            onClick={e => props.handler(e)} disabled={!props.power}\r\n        >\r\n            {props.letter}\r\n            <audio className=\"clip\" id={props.letter} src={props.url} />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Pad;","import React from 'react';\r\nimport Pad from './pad';\r\n\r\nconst LETTERS = [\"Q\", \"W\", \"E\", \"A\", \"S\", \"D\", \"Z\", \"X\", \"C\"];\r\nconst TEXT = [\r\n    \"Heater 1\",\r\n    \"Heater 2\",\r\n    \"Heater 3\",\r\n    \"Heater 4\",\r\n    \"Clap\",\r\n    \"Open HH\",\r\n    \"Kick 'n Hat\",\r\n    \"Kick\",\r\n    \"Closed HH\",\r\n    \"Chord 1\",\r\n    \"Chord 2\",\r\n    \"Chord 3\",\r\n    \"Shaker\",\r\n    \"Open HH 2\",\r\n    \"Closed HH 2\",\r\n    \"Punchy Kick\",\r\n    \"Side Stick\",\r\n    \"Snare\"\r\n];\r\nconst SOUNDS = [\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\r\n    \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"\r\n];\r\n\r\n\r\nclass PadGroup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.playClip = this.playClip.bind(this);\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.makeValidText = this.makeValidText.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.handleInput);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.handleInput);\r\n    }\r\n\r\n    //Determine, if the machine has power, whether the input came from a button or key press and\r\n    //pass relevant data on what clip should be played and what text to display to playClip\r\n    handleInput(e) {\r\n        if (this.props.power) {\r\n            let clip;\r\n            let text;\r\n            let index;\r\n            if (e.type == \"click\") {\r\n                clip = document.getElementById(e.target.textContent);\r\n                index = LETTERS.indexOf(e.target.textContent);\r\n            } else if (e.type == \"keydown\") {\r\n                clip = document.getElementById(String.fromCharCode(e.which));\r\n                index = LETTERS.indexOf(String.fromCharCode(e.which));\r\n            }\r\n            if (this.props.bank == 2) {\r\n                index = index + 9;\r\n            }\r\n            //If a correct key was pressed\r\n            if(index > -1){\r\n                text = TEXT[index];\r\n                this.playClip(clip, text);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    //Play the clip associated with the button that was pressed and\r\n    //display that clip's description in the display <input>\r\n    playClip(clip, text) {\r\n        clip.load();\r\n        clip.volume = this.props.volume / 100;\r\n        clip.play();\r\n        this.props.setDisplay(text);\r\n    }\r\n\r\n    //Convert a string from the TEXT array at the index provided into a valid jQuery selector\r\n    makeValidText(index) {\r\n        let s = TEXT[index];\r\n        s = s.replace(\"'\", \"\\'\");\r\n        return s.replace(/\\s/g, \"\\_\");\r\n    }\r\n\r\n    render() {\r\n        let pads = [];\r\n        let j = 0;\r\n        if (this.props.bank == 2) { j = 9; }\r\n        for (let i = 0; i < 9; i++) {\r\n            pads.push(\r\n                <Pad power={this.props.power}\r\n                    desc={this.makeValidText(i + j)}\r\n                    letter={LETTERS[i]}\r\n                    url={SOUNDS[i + j]}\r\n                    handler={this.handleInput}\r\n                    onKeyDown={e => this.handleInput(e)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div id=\"drum-grid\">\r\n                {pads.slice(0, 3)}\r\n                {pads.slice(3, 6)}\r\n                {pads.slice(6, 9)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PadGroup;","import React from 'react';\r\nimport PadGroup from \"./pad-group\";\r\n\r\nclass DrumMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { power: true, bank: 1, volume: 50 };\r\n    this.volChange = this.volChange.bind(this);\r\n    this.bankChange = this.bankChange.bind(this);\r\n    this.powerChange = this.powerChange.bind(this);\r\n    this.setDisplay = this.setDisplay.bind(this);\r\n  }\r\n\r\n  //Change the volume to the current setting of the volume slider\r\n  volChange(e) {\r\n    this.setState({\r\n      power: this.state.power,\r\n      bank: this.state.bank,\r\n      volume: e.target.value\r\n    });\r\n    document.getElementById(\"vol-display\").innerHTML =\r\n      \"Volume: \" + e.target.value;\r\n  }\r\n\r\n  //Change the bank to the opposite setting of what it currently is. This changes the sound clips to the alternate set\r\n  bankChange(id) {\r\n    if (id == \"bank1\" && this.state.bank == 2) {\r\n      this.setState({\r\n        power: this.state.power,\r\n        bank: 1,\r\n        volume: this.state.volume\r\n      });\r\n      this.setDisplay(\"\");\r\n    }\r\n    else if (id == \"bank2\" && this.state.bank == 1) {\r\n      this.setState({\r\n        power: this.state.power,\r\n        bank: 2,\r\n        volume: this.state.volume\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  //Either turns the pads on or off, depending on their current state\r\n  powerChange() {\r\n    this.setState({\r\n      power: !this.state.power,\r\n      bank: this.state.bank,\r\n      volume: this.state.volume\r\n    });\r\n    this.setDisplay(\"\");\r\n  }\r\n\r\n  //Set the text displayed by the display <input> text element \r\n  setDisplay(text) {\r\n    document.getElementById(\"display\").innerHTML = text;\r\n  }\r\n\r\n  render() {\r\n    let bank1Col = { backgroundColor: \"white\" };\r\n    let bank2Col = { backgroundColor: \"white\" };\r\n    let powerCol = { color: \"red\" };\r\n    if (this.state.power) {\r\n      powerCol = { color: \"green\" };\r\n      if (this.state.bank == 1) {\r\n        bank1Col = { backgroundColor: \"green\" };\r\n      }\r\n      else {\r\n        bank2Col = { backgroundColor: \"green\" };\r\n      }\r\n    }\r\n    return (\r\n      <div id=\"drum-machine\">\r\n        <h1>Drum Machine 2019</h1>\r\n        <div id=\"drum-cont\">\r\n          <PadGroup power={this.state.power} bank={this.state.bank} volume={this.state.volume} setDisplay={this.setDisplay} />\r\n        </div>\r\n        <div id=\"controls\">\r\n          <div id=\"settings\">\r\n            <div id=\"power-cont\">\r\n              <h2 id=\"power-title\">Power</h2>\r\n              <div id=\"power-toggle\">\r\n                <button id=\"power\" style={powerCol} onClick={this.powerChange}>\r\n                  <i className=\"fas fa-power-off\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div id=\"bank-cont\">\r\n              <h2 id=\"bank-title\">Bank</h2>\r\n              <div id=\"bank-toggle\">\r\n                <button id=\"bank1\" style={bank1Col} onClick={e => this.bankChange(e.target.id)} disabled={!this.state.power}>A</button>\r\n                <button id=\"bank2\" style={bank2Col} onClick={e => this.bankChange(e.target.id)} disabled={!this.state.power}>B</button>\r\n              </div>\r\n            </div>\r\n            <h2 id=\"vol-display\">Volume: {this.state.volume}</h2>\r\n            <input id=\"vol-slider\" type=\"range\" min=\"0\" max=\"100\" step=\"1\" defaultValue={this.state.volume} onInput={this.volChange} disabled={!this.state.power} />\r\n          </div>\r\n          <p id=\"display\"></p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumMachine;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport DrumMachine from './cmps/drum-machine';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<DrumMachine />, document.getElementById('main'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}